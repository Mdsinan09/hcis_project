// Remove the window.jspdf reference and use direct import
import jsPDF from 'jspdf';

const getScoreColor = (score) => {
  if (score < 40) return [255, 59, 48]; // Red
  if (score < 70) return [255, 214, 0]; // Yellow
  return [0, 200, 83]; // Green
};

export const generatePDF = (analysisResult) => {
  const { 
    fileName, 
    fusionScore, 
    videoScore, 
    audioScore, 
    textScore, 
    explanation, 
    timestamp 
  } = analysisResult;

  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(20);
  doc.setTextColor(44, 62, 80);
  doc.text('HCIS Analysis Report', 105, 30, { align: 'center' });
  
  // File Info
  doc.setFontSize(12);
  doc.setTextColor(100);
  doc.text(`File: ${fileName}`, 20, 50);
  doc.text(`Date: ${new Date(timestamp).toLocaleDateString()}`, 20, 60);
  doc.text(`Time: ${new Date(timestamp).toLocaleTimeString()}`, 20, 70);
  
  // Fusion Score
  doc.setFontSize(16);
  doc.setTextColor(41, 128, 185);
  doc.text('Overall Analysis Score', 20, 90);
  
  doc.setFontSize(24);
  doc.setTextColor(...getScoreColor(fusionScore));
  doc.text(`${fusionScore}%`, 20, 105);
  
  // Status
  const status = fusionScore < 40 ? 'Fabricated' : fusionScore < 70 ? 'Suspicious' : 'Authentic';
  doc.setFontSize(14);
  doc.text(`Status: ${status}`, 20, 120);
  
  // Component Scores
  doc.setFontSize(14);
  doc.setTextColor(44, 62, 80);
  doc.text('Component Analysis:', 20, 140);
  
  let yPosition = 155;
  const components = [
    { name: 'Video', score: videoScore, icon: '🎥' },
    { name: 'Audio', score: audioScore, icon: '🔊' },
    { name: 'Text', score: textScore, icon: '📝' }
  ];
  
  components.forEach(comp => {
    if (comp.score > 0) {
      doc.setFontSize(12);
      doc.setTextColor(...getScoreColor(comp.score));
      doc.text(`${comp.icon} ${comp.name}: ${comp.score}%`, 30, yPosition);
      yPosition += 15;
    }
  });
  
  // Explanation
  doc.setFontSize(14);
  doc.setTextColor(44, 62, 80);
  doc.text('Analysis Explanation:', 20, yPosition + 10);
  
  doc.setFontSize(11);
  doc.setTextColor(80);
  const splitExplanation = doc.splitTextToSize(explanation, 170);
  doc.text(splitExplanation, 20, yPosition + 25);
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(150);
  doc.text('Generated by HCIS - Human-Computer Interaction System', 105, 280, { align: 'center' });
  doc.text('© 2024 - All rights reserved', 105, 290, { align: 'center' });
  
  // Save the PDF
  doc.save(`HCIS_Report_${fileName.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.pdf`);
};